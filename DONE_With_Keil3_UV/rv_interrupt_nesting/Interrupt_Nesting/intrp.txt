; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 939] for uVision
; commandline ArmCC [--debug -c --asm --interleave -ointrp.o --depend=intrp.d --device=DARMP --apcs=interwork -O3 -IC:\Keil\ARM\INC\Philips Intrp.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  tc0 PROC
;;;17     /* Timer Counter 0 Interrupt executes each 10ms @ 60 MHz CPU Clock */
;;;18     void tc0 (void) __irq{
000000  e92d503f          PUSH     {r0-r5,r12,lr}
;;;19       ++timeval;
000004  e59f4158          LDR      r4,|L1.356|
000008  e5940004          LDR      r0,[r4,#4]  ; timeval
00000c  e2800001          ADD      r0,r0,#1
000010  e5840004          STR      r0,[r4,#4]  ; timeval
;;;20       if ((timeval % 10000) == 0)  {
000014  e59f114c          LDR      r1,|L1.360|
000018  e5940004          LDR      r0,[r4,#4]  ; timeval
00001c  ebfffffe          BL       __aeabi_idivmod
000020  e3510000          CMP      r1,#0
000024  e3a00000          MOV      r0,#0
;;;21         timeval = 0;
000028  05840004          STREQ    r0,[r4,#4]  ; timeval
;;;22         SecondCnt++;
00002c  05941008          LDREQ    r1,[r4,#8]  ; SecondCnt
000030  02811001          ADDEQ    r1,r1,#1
000034  05841008          STREQ    r1,[r4,#8]  ; SecondCnt
;;;23       }
;;;24       T0IR        = 1;                            // Clear interrupt flag
000038  e59f212c          LDR      r2,|L1.364|
00003c  e3a01001          MOV      r1,#1
000040  e5821000          STR      r1,[r2,#0]
;;;25       VICVectAddr = 0;                            // Acknowledge Interrupt
000044  e5000fd0          STR      r0,[r0,#-0xfd0]
;;;26     }
000048  e8bd503f          POP      {r0-r5,r12,lr}
00004c  e25ef004          SUBS     pc,lr,#4
;;;27     
                          ENDP

                  init_timer PROC
;;;29     void init_timer (void) {
;;;30       T0MR0 = 1499;                               // 0.1mSec = 1.500-1 counts
000050  e59f1118          LDR      r1,|L1.368|
000054  e59f0110          LDR      r0,|L1.364|
000058  e5801018          STR      r1,[r0,#0x18]
;;;31       T0MCR = 3;                                  // Interrupt and Reset on MR0
00005c  e3a01003          MOV      r1,#3
000060  e5801014          STR      r1,[r0,#0x14]
;;;32       T0TCR = 1;                                  // Timer0 Enable
000064  e3a01001          MOV      r1,#1
000068  e5801004          STR      r1,[r0,#4]
;;;33       VICVectAddr0 = (unsigned long)tc0;          // set interrupt vector in 0
00006c  e24f1074          ADR      r1,tc0
000070  e3a00000          MOV      r0,#0
000074  e5001f00          STR      r1,[r0,#-0xf00]
;;;34       VICVectCntl0 = 0x20 | 4;                    // use it for Timer 0 Interrupt
000078  e3a01024          MOV      r1,#0x24
00007c  e5001e00          STR      r1,[r0,#-0xe00]
;;;35       VICIntEnable = 0x00000010;                  // Enable Timer0 Interrupt
000080  e3a01010          MOV      r1,#0x10
000084  e5001ff0          STR      r1,[r0,#-0xff0]
;;;36     }
000088  e12fff1e          BX       lr
;;;37     
                          ENDP

                  delay PROC
00008c  e3a00000          MOV      r0,#0                 ;0
                  |L1.144|
000090  e2800001          ADD      r0,r0,#1              ;0
000094  e3500601          CMP      r0,#0x100000          ;0
000098  bafffffc          BLT      |L1.144|
00009c  e12fff1e          BX       lr                    ;0
                          ENDP

                  eint1_srv PROC
;;;49     void eint1_srv (void) {                       // C interrupt function
;;;50       EXTINT      = 2;                            // Clear EINT1 interrupt flag
0000a0  e59f10cc          LDR      r1,|L1.372|
0000a4  e3a00002          MOV      r0,#2
0000a8  e52de004          PUSH     {lr}                  ;49
0000ac  e5c10140          STRB     r0,[r1,#0x140]
;;;51       delay ();                                   // wait a long time
0000b0  ebfffffe          BL       delay
;;;52       ++intrp_count;                              // increment interrupt count
0000b4  e59f00a8          LDR      r0,|L1.356|
0000b8  e5901000          LDR      r1,[r0,#0]  ; intrp_count
0000bc  e2811001          ADD      r1,r1,#1
0000c0  e5801000          STR      r1,[r0,#0]  ; intrp_count
;;;53     //VICVectAddr = 0;                            // Acknowledge Interrupt
;;;54     }
0000c4  e49de004          POP      {lr}
0000c8  e12fff1e          BX       lr
;;;55     
                          ENDP

                  init_eint1 PROC
;;;57     void init_eint1 (void) {
;;;58     	EXTMODE      = 2;                           // Edge sensitive mode on EINT1
0000cc  e59f10a0          LDR      r1,|L1.372|
0000d0  e3a00002          MOV      r0,#2
0000d4  e5c10148          STRB     r0,[r1,#0x148]
;;;59     	EXTPOLAR     = 2;                           // raising edge sensitive
0000d8  e5c1014c          STRB     r0,[r1,#0x14c]
;;;60     	PINSEL0      = 2 << 28;                     // Enable EINT1 on GPIO_0.14
0000dc  e3a00202          MOV      r0,#0x20000000
0000e0  e241181d          SUB      r1,r1,#0x1d0000
0000e4  e5810000          STR      r0,[r1,#0]
;;;61       VICVectAddr1 = (unsigned long) eint1_irq;   // set interrupt vector in VIC 0
0000e8  e59f1088          LDR      r1,|L1.376|
0000ec  e3a00000          MOV      r0,#0
0000f0  e5001efc          STR      r1,[r0,#-0xefc]
;;;62       VICVectCntl1 = 0x21 | 15;                   // use VIC 1 for EINT1 Interrupt
0000f4  e3a0102f          MOV      r1,#0x2f
0000f8  e5001dfc          STR      r1,[r0,#-0xdfc]
;;;63       VICIntEnable = 1 << 15;                     // Enable EINT1 Interrupt
0000fc  e3a01902          MOV      r1,#0x8000
000100  e5001ff0          STR      r1,[r0,#-0xff0]
;;;64     }
000104  e12fff1e          BX       lr
;;;65     
                          ENDP

                  main PROC
;;;68     
;;;69       IODIR1 = 0xFF0000;
000108  e59f306c          LDR      r3,|L1.380|
00010c  e3a008ff          MOV      r0,#0xff0000
000110  e52de004          PUSH     {lr}
000114  e3a02000          MOV      r2,#0
000118  e5830018          STR      r0,[r3,#0x18]
;;;70     
;;;71       init_eint1();                               // Enable EINT1
00011c  ebfffffe          BL       init_eint1
;;;72       init_timer ();
000120  ebfffffe          BL       init_timer
000124  e59f0038          LDR      r0,|L1.356|
000128  e3a0187f          MOV      r1,#0x7f0000
00012c  e3a0c502          MOV      r12,#0x800000
                  |L1.304|
;;;73        
;;;74     	while (1)  {
;;;75     	  if ((intrp_count & 0xFF) != LED_out)  {		// intrp_count has changed
000130  e590e000          LDR      lr,[r0,#0]  ; intrp_count
000134  e20ee0ff          AND      lr,lr,#0xff
000138  e15e0002          CMP      lr,r2
;;;76     		  LED_out = (intrp_count & 0x7F);         // set LED out
00013c  15902000          LDRNE    r2,[r0,#0]  ; intrp_count
;;;77     			IOCLR1 = 0x7F0000;                      // clear LED's
000140  1583101c          STRNE    r1,[r3,#0x1c]
000144  1202207f          ANDNE    r2,r2,#0x7f           ;76
;;;78     			IOSET1 = (LED_out << 16);               // output intrp_count	on LED
000148  11a0e802          LSLNE    lr,r2,#16
00014c  1583e014          STRNE    lr,[r3,#0x14]
;;;79     	  }
;;;80         if ((SecondCnt & 1) == 0) IOCLR1 = 0x800000;
000150  e590e008          LDR      lr,[r0,#8]  ; SecondCnt
000154  e31e0001          TST      lr,#1
;;;81         else                      IOSET1 = 0x800000;
000158  1583c014          STRNE    r12,[r3,#0x14]
00015c  0583c01c          STREQ    r12,[r3,#0x1c]        ;80
000160  eafffff2          B        |L1.304|
;;;82     	}
;;;83     }
;;;84     
                          ENDP

                  |L1.356|
000164  00000000          DCD      ||.data||
                  |L1.360|
000168  00002710          DCD      0x00002710
                  |L1.364|
00016c  e0004000          DCD      0xe0004000
                  |L1.368|
000170  000005db          DCD      0x000005db
                  |L1.372|
000174  e01fc000          DCD      0xe01fc000
                  |L1.376|
000178  00000000          DCD      eint1_irq
                  |L1.380|
00017c  e0028000          DCD      0xe0028000

                          AREA ||.data||, DATA, ALIGN=2

                  intrp_count
000000  00000000          DCD      0x00000000
                  timeval
000004  00000000          DCD      0x00000000
                  SecondCnt
000008  00000000          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
