/*----------------------------------------------------------------------------
 * Name:    Debugger.ini
 * Purpose: signal, simulation functions
 * Version: V1.00
 * Note(s):
 *----------------------------------------------------------------------------
 * This file is part of the uVision/ARM development tools.
 * This software may only be used under the terms of a valid, current,
 * end user licence from KEIL for a compatible version of KEIL software
 * development tools. Nothing else gives you the right to use this software.
 *
 * This software is supplied "AS IS" without warranties of any kind.
 *
 * Copyright (c) 2008 Keil - An ARM Company. All rights reserved.
 *----------------------------------------------------------------------------
 * History:
 *          V1.00 Initial Version
 *----------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------
  Generate two sine wave signals
    freq1, vol1 = frequency & volume of sine wave 1
    freq2, vol2 = frequency & volume of sine wave 2
 *------------------------------------------------------------------------------*/
signal void mix_sine (double vol1, double vol2, double freq1, double freq2)  {
  float sig1;
  float sig2;
  int z;

  z = 0;
  while (z < 5000)  {    // generate 50 mSec tone

    sig1 = __sin ((((double)states/(double)SYSCLK) * freq1) * 3.1415926 * 2);
    sig2 = __sin (((states * freq2)/(double)SYSCLK) * 3.1415926 * 2);
    ADC1_IN1 =  ((sig1 * vol1) + (sig2 * vol2)) + 1.6;
    swatch (0.00001);    // in 0.01 uSec resolution
    z++;
  }
  ADC1_IN1 = 1.6;
}


/*------------------------------------------------------------------------------
  Generate all DTMF tone pairs
    vol1 = volume of sine wave 1
    vol2 = volume of sine wave 2
    tol1 = tolerancy of sine wave 1
    tol2 = tolerancy of sine wave 1
 *------------------------------------------------------------------------------*/
SIGNAL void Tester (float vol1, float vol2, float tol1, float tol2)  {
  ADC1_IN1 = 1.6;   // set offset volatage of A/D input
  swatch (0.05);
  mix_sine (vol1, vol2, 697 * tol1, 1209 * tol2);    /* 1 */
  swatch (0.09);
  mix_sine (vol1, vol2, 697 * tol1, 1336 * tol2);    /* 2 */
  swatch (0.09);
  mix_sine (vol1, vol2, 697 * tol1, 1477 * tol2);    /* 3 */
  swatch (0.09);
  mix_sine (vol1, vol2, 770 * tol1, 1209 * tol2);    /* 4 */
  swatch (0.09);
  mix_sine (vol1, vol2, 770 * tol1, 1336 * tol2);    /* 5 */
  swatch (0.09);
  mix_sine (vol1, vol2, 770 * tol1, 1477 * tol2);    /* 6 */
  swatch (0.09);
  mix_sine (vol1, vol2, 852 * tol1, 1209 * tol2);    /* 7 */
  swatch (0.09);
  mix_sine (vol1, vol2, 852 * tol1, 1336 * tol2);    /* 8 */
  swatch (0.09);
  mix_sine (vol1, vol2, 852 * tol1, 1477 * tol2);    /* 9 */
  swatch (0.09);
  mix_sine (vol1, vol2, 941 * tol1, 1336 * tol2);    /* 0 */
  swatch (0.09);
  mix_sine (vol1, vol2, 941 * tol1, 1209 * tol2);    /* * */
  swatch (0.09);
  mix_sine (vol1, vol2, 941 * tol1, 1477 * tol2);    /* # */
  swatch (0.09);
  mix_sine (vol1, vol2, 697 * tol1, 1633 * tol2);    /* A */
  swatch (0.09);
  mix_sine (vol1, vol2, 770 * tol1, 1633 * tol2);    /* B */
  swatch (0.09);
  mix_sine (vol1, vol2, 852 * tol1, 1633 * tol2);    /* C */
  swatch (0.09);
  mix_sine (vol1, vol2, 941 * tol1, 1633 * tol2);    /* D */
  swatch (0.09);
}         


/*------------------------------------------------------------------------------
  Generate DTMF signals with various parameters
 *------------------------------------------------------------------------------*/
SIGNAL void TestAll (void)  {
  printf ("Volumue=0.8V, Exact Frequency\n");
  Tester(0.8, 0.8, 1.0, 1.0);
  swatch (1.8);
  printf ("Volumue=0.5V, +/- 2%% Frequency Tolerance\n");
  Tester(0.5, 0.5, 0.98, 1.02);
  swatch (1.8);
  printf ("Volumue=0.05V, +/- 2%% Frequency Tolerance\n");
  Tester(0.05, 0.05, 1.02, 0.98);
  swatch (1.8);
  printf ("Volumue=0.8V/0.3V, +/- 2%% Frequency Tolerance\n");
  Tester(0.8,  0.3,  1.02, 0.98);
  swatch (1.8);
  printf ("Volumue=0.2V/0.9V, +/- 2%% Frequency Tolerance\n");
  Tester(0.2,  0.9,  1.02, 0.98);
  swatch (1.8);
  printf ("Volumue=0.5V, +/- 8%% Frequency Tolerance\n");
  Tester(0.5, 0.5, 0.92, 1.08);
  swatch (1.8);
  _break_ = 1;             // stop execution
}

/*----------------------------------------------------------------------------
  Simulate LCD Display (2 line 40 character Text LCD with 4-bit Interface)
    Pins:
      - DB4..DB7 = PC.3..PC.0
      - RS       = PC.12
      - RW       = PC.11
      - E        = PC.10
 *----------------------------------------------------------------------------*/

define unsigned long oldPORTC;
define unsigned char Cursor;
define unsigned char bitpos;
define unsigned char Cmd;

define unsigned long _E;
define unsigned long _RW;
define unsigned long _RS;
define unsigned long _CTRL;
define unsigned long _DATA;

define unsigned char DataShift;
define unsigned long LCDMem;

MAP 0x10000000, 0x10000100 READ WRITE   // LCD Memory
                                        // Use Memory watch window to display LCD

DataShift = 0;                          // shift data to 0 position
LCDMem    = 0x10000000;                 // memory to display LCD

oldPORTC = PORTC;
Cursor   = 0;
bitpos   = 0;

_E    = 0x00000400;
_RW   = 0x00000800;
_RS   = 0x00001000;
_CTRL = 0x00001C00;
_DATA = 0x0000000F;

//Swap the data bits (0 = 3, 1 = 2, 2 = 1, 3 = 0)
Func unsigned char Data_Swap (unsigned char c) {
  unsigned char x;
  x  = 0;
  x |= (c & 0x01) << 3;
  x |= (c & 0x02) << 1;
  x |= (c & 0x04) >> 1;
  x |= (c & 0x08) >> 3;
  
  return(x);
}
// Clear Display Function
Func void LCD_Clear (void) {
  unsigned char i;

  for (i = 0; i < 80; i++) {
//    _WBYTE(LCDMem + i, 0x20);
    _WBYTE(LCDMem + i, 0x0);
  }
  Cursor = 0;
}

// LCD Display Signal Function
Signal void LCD_Display (void) {
  unsigned char val;

  while (1) {
    wwatch(PORTC);  // Wait for write to PORTC
    if ((PORTC & _RW) == 0) {
      // Write to Display
      if (((oldPORTC & _E) != 0) && ((PORTC & _E) == 0)) {
        // E: 1->0
        if ((PORTC & _RS) == 0) {
          // Write Command
          val  = (Data_Swap(PORTC & _DATA) >> DataShift);
          if (val == 3) {
            bitpos = 4;
          }
          Cmd &= 0xF0 >> bitpos;
          Cmd |= val << bitpos;
          if (bitpos == 0) {
            if (Cmd == 0x01) {
              // Clear Display
              LCD_Clear();
            } else if (Cmd & 0x80) {
              // Set Cursor Position
              Cursor = Cmd & 0x7F;
            }
          }
        } else {
          // Write Data
          val  = _RBYTE(LCDMem + Cursor);
          val &= 0xF0 >> bitpos;
          val |= (Data_Swap(PORTC & _DATA) >> DataShift) << bitpos;
          _WBYTE(LCDMem + Cursor, val);
          if (bitpos == 0) Cursor++;
        }
        bitpos ^= 4;
      }
    } else {
      // Read from Display
      if (((oldPORTC & _E) == 0) && ((PORTC & _E) != 0)) {
        // E: 0->1
        if ((PORTC & _RS) == 0) {
          // Read Status
          val = (0x7F >> bitpos) & 0x0F;
        } else {
          // Read Pointer
          val = ((Cursor & 0x7F) >> bitpos) & 0x0F;
        }
        PORTC &= ~_DATA;
        PORTC |=  (Data_Swap(val) << DataShift);
        bitpos ^= 4;
      }
    }
    oldPORTC = PORTC;
  }
}

/*------------------------------------------------------------------------------
  Define the used Buttens
 *----------------------------------------------------------------------------*/
KILL BUTTON *
DEFINE BUTTON "GenDigits1", "Tester(0.8,  0.8,  1.0,  1.0)";
DEFINE BUTTON "GenDigits2", "Tester(0.5,  0.5,  0.98, 1.02)";
DEFINE BUTTON "GenDigits3", "Tester(0.05, 0.05, 1.02, 0.98)";
DEFINE BUTTON "GenDigits4", "Tester(0.8,  0.3,  1.02, 0.98)";
DEFINE BUTTON "GenDigits5", "Tester(0.2,  0.9,  1.02, 0.98)";
DEFINE BUTTON "GenDigits6", "Tester(0.5,  0.5,  0.92, 1.08)";
DEFINE BUTTON "Gen All", "TestAll()";

LCD_Display()
