/*-------------------------------------------------------------
This file set the analog inputs for the A/D to different
values depending on the button clicked
-------------------------------------------------------------*/
define float my_VREF;
my_VREF = 5.0

/*-------------------------------------------------------------
Create buttons -to set the analog inputs to 0.
               -to set the analog inputs to VREF.
               -to set different analog inputs.
-------------------------------------------------------------*/

define button "Inputs = 0V" ,          "Set_Inputs(0.0);"
define button "Inputs = High" ,        "Set_Inputs(my_VREF);"
define button "Different A/D Inputs" , "Different_Inputs();"
define button "Sine Wave (AIN0)" ,     "AIN0_Sine(my_VREF);"
define button "Sawtooth (AIN1)" ,      "AIN1_Saw (my_VREF);"
define button "Stop Signals" ,         "signal kill AIN0_Sine;signal kill AIN1_Saw;"
define button "Set AIN2 Voltage" ,     "AIN2 = GetDbl(\"Enter AIN2 Voltage\");"


/*-------------------------------------------------------------
The following functions will set the imputs of the analog
converter to 0, limit, or differnt values
-------------------------------------------------------------*/
func void Set_Inputs (float volt) {
  AIN0 = AIN1 = AIN2 = AIN3 = AIN4 = AIN5 = AIN6 = AIN7 = volt;
}


func void Different_Inputs () {
  AIN0 = 0.2;
  AIN1 = 0.4;
  AIN2 = 0.6;
  AIN3 = 0.8;
  AIN4 = 1.0;
  AIN5 = 1.2;
  AIN6 = 1.4;
  AIN7 = 1.6;
}


/*----------------------------------------------------------------------
The following function generates anolog voltages in a sine wave pattern.
Use the built-in Logic analyzer to view the output as a sine wave.
----------------------------------------------------------------------*/
signal void AIN0_Sine ( float sn_limit )  {

  float frequency;    // output frequency in Hz
  float offset;       // voltage offset
  float val;

  offset    = sn_limit / 2;
  frequency = 1800;

  printf ("Sine Wave Signal on AIN Channel 0.\n");

  while (1) {
    val = __sin (frequency * (((float) STATES) / CLOCK) * 2 * 3.1415926);
    AIN0 = (val * (sn_limit / 2)) + offset;
    swatch (0.00001);                // in 10 uSec steps
  }
}

/*-----------------------------------------------------------------
The following function generates a sawtooth signal pattern for AIN1.  
-----------------------------------------------------------------*/
signal void AIN1_Saw (float st_limit)  {
  float frequency;    // output frequency in Hz
  float offset;       // voltage offset
  float duration;     // duration in Seconds
  float val;
  long  i, end, steps;
    
  offset    = 0.0;
  frequency = 1400;
  duration  = 0.5;

  printf ("Saw Tooth Signal on AIN Channel 1.\n");

  steps = (100000 * (1/frequency));
  while (1) {
    end = (duration * 100000);
    for (i = 0 ; i < end; i++)  {
      val = (i % steps) / ((float) steps);
      AIN1 = (val * st_limit) + offset;
      swatch (0.00001);                // in 10 uSec increments
    }
  }
}


/*---------------------------------------------
 Generates a Square Wave Signal on AIN Channel 0
---------------------------------------------*/
signal void AIN0_Square (float volts)  {
  float frequency;    // output frequency in Hz
  float offset;       // volatge offset
  float duration;     // duration in Seconds
    
  offset    = 1.6;
  frequency = 2400;
  duration  = 0.5;

  printf ("Square Wave Signal on AIN Channel 0.\n");

  while (1) {
    while (duration > 0.0)  {
      AIN0 = volts + offset;
      swatch (0.5 / frequency);
      AIN0 = offset;
      swatch (0.5 / frequency);
      duration -= 1.0 / frequency;
    }
  }
}


/*-------------------------------------------------------------
-------------------------------------------------------------*/



