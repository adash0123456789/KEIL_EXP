/*-------------------------------------------------------------
This file set the analog inputs for the A/D to different
values depending on the button clicked
-------------------------------------------------------------*/
define float my_VREF;
my_VREF = 3.0

/*-------------------------------------------------------------
Create buttons -to set the analog inputs to 0.
               -to set the analog inputs to VREF.
               -to set different analog inputs.
-------------------------------------------------------------*/

define button "Inputs = 0V" ,          "Set_Inputs(0.0);"
define button "Inputs = High" ,        "Set_Inputs(my_VREF);"
define button "Different A/D Inputs" , "Different_Inputs();"
define button "Sine Wave (AD0)" ,     "AD0_Sine(my_VREF);"
define button "Sawtooth (AD1)" ,      "AD1_Saw (my_VREF);"
define button "Stop Signals" ,         "signal kill AD0_Sine;signal kill AD1_Saw;"


/*-------------------------------------------------------------
The following functions will set the imputs of the analog
converter to 0, limit, or different values
-------------------------------------------------------------*/
func void Set_Inputs (float volt) {
  AD0 = AD1 = AD2 = AD3 = volt;
}


func void Different_Inputs () {
  AD0 = 0.6;
  AD1 = 1.4;
  AD2 = 2.6;
  AD3 = 1.5;
}


/*----------------------------------------------------------------------
The following function generates analog voltages in a sine wave pattern.
Use the built-in Logic analyzer to view the output as a sine wave.
----------------------------------------------------------------------*/
signal void AD0_Sine ( float sn_limit )  {

  float frequency;    // output frequency in Hz
  float offset;       // voltage offset
  float val;

  offset    = sn_limit / 2;
  frequency = 1800;

  printf ("Sine Wave Signal on AD Channel 0.\n");

  while (1) {
    val = __sin (frequency * (((float) STATES) / MCK) * 2 * 3.1415926);
    AD0 = (val * (sn_limit / 2)) + offset;
    swatch (0.00001);                // in 10 uSec steps
  }
}

/*-----------------------------------------------------------------
The following function generates a sawtooth signal pattern for AD1.  
-----------------------------------------------------------------*/
signal void AD1_Saw (float st_limit)  {
  float frequency;    // output frequency in Hz
  float val;
  long  i, steps;
    
  frequency = 1400;

  printf ("Saw Tooth Signal on AD Channel 1.\n");

  steps = (100000 * (1/frequency));
  for (i = 0 ; ; i++)  {             // Runs signal continuously
    val = (i % steps) / ((float) steps);
    AD1 = (val * st_limit);
    swatch (0.00001);                // in 10 uSec increments
  }
}


/*-------------------------------------------------------------
-------------------------------------------------------------*/



